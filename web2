i#!/bin/bash

if [ $# -lt 4 ]; then
    echo "Usage: $0 <repository_owner> <repository_name> <file_name> <branch>"
    exit 1
fi

REPO_OWNER=$1
REPO_NAME=$2
FILE_NAME=$3
BRANCH=$4

# Commit message
COMMIT_MESSAGE="testing 1234"

# Read file contents into a variable
FILE_CONTENT=$(cat /dev/stdin | jq -s -R '.')

# Get the SHA of the latest commit on the branch
LATEST_COMMIT_SHA=$(gh api repos/${REPO_OWNER}/${REPO_NAME}/git/ref/heads/${BRANCH} --jq '.object.sha')

# Get the tree SHA associated with the latest commit
TREE_SHA=$(gh api repos/${REPO_OWNER}/${REPO_NAME}/git/commits/${LATEST_COMMIT_SHA} --jq '.tree.sha')

# Create a new tree with the updated file
NEW_TREE_SHA=$(gh api repos/${REPO_OWNER}/${REPO_NAME}/git/trees --field base_tree="${TREE_SHA}" \
  --input - <<EOF | jq -r '.sha'
{
  "tree": [
    {
      "path": "${FILE_NAME}",
      "mode": "100644",
      "type": "blob",
      "content": ${FILE_CONTENT}
    }
  ]
}
EOF
)

# Create a new commit with an array of parents
JSON_DATA=$(cat <<EOF
{
  "message": "${COMMIT_MESSAGE}",
  "parents": ["${LATEST_COMMIT_SHA}"],
  "tree": "${NEW_TREE_SHA}"
}
EOF
)

NEW_COMMIT_SHA=$(gh api repos/${REPO_OWNER}/${REPO_NAME}/git/commits --input - <<<"${JSON_DATA}" | jq -r '.sha')

# Update the branch reference
gh api repos/${REPO_OWNER}/${REPO_NAME}/git/refs/heads/${BRANCH} \
  --field sha="${NEW_COMMIT_SHA}" \
  --field force=true

echo "Changes committed successfully!"

